"""
Network Security Demo Module  
Demonstra√ß√µes de an√°lise de rede e ferramentas de reconhecimento
"""

import socket
import subprocess
import platform
import ipaddress
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt
from rich import box

class NetworkDemo:
    """Demonstra√ß√µes interativas de seguran√ßa de rede"""
    
    def __init__(self, console: Console):
        self.console = console
        
    async def run(self):
        """Loop principal dos demos de rede"""
        
        while True:
            self.show_network_menu()
            
            choice = Prompt.ask(
                "\nüîç Escolha o demo de rede",
                choices=['1', '2', '3', '4', 'b'],
                default='b'
            )
            
            if choice == '1':
                await self.port_scan_demo()
            elif choice == '2':
                await self.network_info_demo()
            elif choice == '3':
                await self.ping_demo()
            elif choice == '4':
                await self.dns_lookup_demo()
            elif choice == 'b':
                break
                
    def show_network_menu(self):
        """Exibe menu dos demos de rede"""
        
        menu_table = Table(
            title="üîç Laborat√≥rio de An√°lise de Rede",
            box=box.ROUNDED,
            border_style="cyan"
        )
        
        menu_table.add_column("Op√ß√£o", style="bold yellow", width=8)
        menu_table.add_column("Demo", style="bold white", width=25)
        menu_table.add_column("Aprenda Sobre", style="dim white", width=35)
        
        demos = [
            ("1", "Verifica√ß√£o de Portas", "Port scanning b√°sico e an√°lise de servi√ßos"),
            ("2", "Informa√ß√µes de Rede", "An√°lise de configura√ß√£o de rede local"),
            ("3", "Teste de Conectividade", "Ping e an√°lise de lat√™ncia"),
            ("4", "Consulta DNS", "Resolu√ß√£o de nomes e an√°lise DNS"),
            ("B", "Voltar ao Menu Principal", "Retornar √† aplica√ß√£o principal")
        ]
        
        for option, demo, description in demos:
            menu_table.add_row(option, demo, description)
            
        self.console.print("\n")
        self.console.print(menu_table, justify="center")
        
    async def port_scan_demo(self):
        """Demo de verifica√ß√£o de portas"""
        
        self.console.print(Panel(
            "üîç Demo de Verifica√ß√£o de Portas\n\n"
            "Port scanning identifica servi√ßos rodando em um host.\n"
            "‚ö†Ô∏è Use apenas em sistemas pr√≥prios ou com autoriza√ß√£o!",
            title="Verifica√ß√£o de Portas",
            border_style="cyan"
        ))
        
        target = Prompt.ask("\nüéØ Digite o alvo para scan", default="127.0.0.1")
        
        # Portas comuns para testar
        common_ports = [22, 23, 25, 53, 80, 110, 135, 139, 143, 443, 993, 995, 1433, 3306, 3389, 5432, 5900, 8080]
        
        self.console.print(f"\nüîç Verificando portas em {target}...")
        
        # Tabela de resultados
        results_table = Table(
            title=f"üìä Resultados do Scan - {target}",
            box=box.SIMPLE,
            border_style="green"
        )
        
        results_table.add_column("Porta", style="bold cyan", width=8)
        results_table.add_column("Status", style="bold", width=12)
        results_table.add_column("Servi√ßo", style="white", width=20)
        results_table.add_column("Descri√ß√£o", style="dim white", width=30)
        
        # Mapeamento de servi√ßos
        service_map = {
            22: ("SSH", "Secure Shell - Acesso remoto"),
            23: ("Telnet", "Acesso remoto n√£o criptografado"),
            25: ("SMTP", "Envio de email"),
            53: ("DNS", "Resolu√ß√£o de nomes"),
            80: ("HTTP", "Web server n√£o criptografado"),
            135: ("RPC", "Remote Procedure Call"),
            139: ("NetBios", "Compartilhamento Windows"),
            443: ("HTTPS", "Web server criptografado"),
            1433: ("MSSQL", "Microsoft SQL Server"),
            3306: ("MySQL", "MySQL Database Server"),
            3389: ("RDP", "Remote Desktop Protocol"),
            5432: ("PostgreSQL", "PostgreSQL Database"),
            8080: ("HTTP-Alt", "Web server porta alternativa")
        }
        
        open_ports = []
        
        for port in common_ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((target, port))
                
                if result == 0:
                    status = "‚úÖ ABERTA"
                    service_name, description = service_map.get(port, ("Desconhecido", "Servi√ßo n√£o identificado"))
                    open_ports.append((port, service_name))
                else:
                    status = "‚ùå FECHADA"
                    service_name, description = service_map.get(port, ("N/A", "N/A"))
                    
                results_table.add_row(str(port), status, service_name, description)
                sock.close()
                
            except Exception:
                results_table.add_row(str(port), "üö´ ERRO", "N/A", "Erro na conex√£o")
                
        self.console.print("\n")
        self.console.print(results_table)
        
        # Resumo da an√°lise
        analysis = f"""
üìä An√°lise do Port Scan:

üéØ Alvo: {target}
üîç Portas verificadas: {len(common_ports)}
‚úÖ Portas abertas: {len(open_ports)}
‚ùå Portas fechadas: {len(common_ports) - len(open_ports)}

üîì Servi√ßos identificados:
{chr(10).join([f'‚Ä¢ Porta {port}: {service}' for port, service in open_ports]) if open_ports else '‚Ä¢ Nenhum servi√ßo comum detectado'}

‚ö†Ô∏è Considera√ß√µes de seguran√ßa:
‚Ä¢ Portas abertas podem ser pontos de entrada
‚Ä¢ Servi√ßos desnecess√°rios devem ser desabilitados
‚Ä¢ Use firewalls para controlar acesso
‚Ä¢ Mantenha servi√ßos atualizados
        """
        
        self.console.print(Panel(analysis.strip(), title="üìä An√°lise de Seguran√ßa", border_style="blue"))
        
        Prompt.ask("\nPressione Enter para continuar")
        
    async def network_info_demo(self):
        """Demo de informa√ß√µes de rede"""
        
        self.console.print(Panel(
            "üåê Informa√ß√µes de Configura√ß√£o de Rede\n\n"
            "An√°lise da configura√ß√£o de rede local e interfaces dispon√≠veis.",
            title="Configura√ß√£o de Rede",
            border_style="blue"
        ))
        
        # Tabela de informa√ß√µes de rede
        network_table = Table(
            title="üåê Configura√ß√£o de Rede Local",
            box=box.ROUNDED,
            border_style="blue"
        )
        
        network_table.add_column("Componente", style="bold cyan", width=20)
        network_table.add_column("Informa√ß√£o", style="white", width=40)
        network_table.add_column("Detalhes", style="dim white", width=25)
        
        try:
            # Hostname
            hostname = socket.gethostname()
            network_table.add_row("Hostname", hostname, "Nome da m√°quina")
            
            # IP local
            local_ip = socket.gethostbyname(hostname)
            network_table.add_row("IP Local", local_ip, "Endere√ßo IP principal")
            
            # Informa√ß√µes adicionais sobre a rede
            try:
                # Gateway padr√£o (tentativa)
                if platform.system() == "Windows":
                    import subprocess
                    result = subprocess.run(['ipconfig'], capture_output=True, text=True)
                    # Parsing b√°sico para gateway (simplificado)
                    gateway = "Detectar manualmente"
                else:
                    # Linux/Mac
                    gateway = "Detectar manualmente"
                    
                network_table.add_row("Gateway Padr√£o", gateway, "Roteador de sa√≠da")
            except:
                network_table.add_row("Gateway Padr√£o", "N√£o detectado", "Erro na detec√ß√£o")
                
            # DNS
            try:
                dns_resolver = socket.getfqdn()
                network_table.add_row("FQDN", dns_resolver, "Nome totalmente qualificado")
            except:
                network_table.add_row("FQDN", "N√£o dispon√≠vel", "Erro na resolu√ß√£o")
                
            # An√°lise de rede privada
            try:
                ip_obj = ipaddress.ip_address(local_ip)
                if ip_obj.is_private:
                    network_type = "üè† Rede Privada"
                    security_note = "Protegida por NAT"
                else:
                    network_type = "üåê IP P√∫blico"
                    security_note = "Diretamente acess√≠vel"
                    
                network_table.add_row("Tipo de Rede", network_type, security_note)
            except:
                network_table.add_row("Tipo de Rede", "N√£o analisado", "Erro na an√°lise")
                
        except Exception as e:
            network_table.add_row("Erro", str(e), "Falha na coleta")
            
        self.console.print("\n")
        self.console.print(network_table)
        
        # An√°lise de seguran√ßa da rede
        security_analysis = """
üîí An√°lise de Seguran√ßa de Rede:

üè† Redes Privadas (RFC 1918):
‚Ä¢ 10.0.0.0/8 (10.x.x.x)
‚Ä¢ 172.16.0.0/12 (172.16.x.x - 172.31.x.x)  
‚Ä¢ 192.168.0.0/16 (192.168.x.x)

üõ°Ô∏è Boas pr√°ticas de seguran√ßa:
‚Ä¢ Use firewall para controlar tr√°fego
‚Ä¢ Desabilite servi√ßos desnecess√°rios
‚Ä¢ Mantenha sistema operacional atualizado
‚Ä¢ Use VPN para conex√µes remotas seguras
‚Ä¢ Configure DNS seguro (1.1.1.1, 8.8.8.8)

‚ö†Ô∏è Riscos comuns:
‚Ä¢ Compartilhamentos abertos
‚Ä¢ Senhas padr√£o em roteadores
‚Ä¢ Firmware desatualizado
‚Ä¢ Redes Wi-Fi abertas
        """
        
        self.console.print(Panel(security_analysis.strip(), title="üõ°Ô∏è Seguran√ßa de Rede", border_style="green"))
        
        Prompt.ask("\nPressione Enter para continuar")
        
    async def ping_demo(self):
        """Demo de teste de conectividade"""
        
        self.console.print(Panel(
            "üì° Teste de Conectividade de Rede\n\n"
            "O ping testa a conectividade e mede a lat√™ncia at√© um host remoto.",
            title="Teste de Ping",
            border_style="yellow"
        ))
        
        target = Prompt.ask("\nüéØ Digite o host para ping", default="8.8.8.8")
        
        # Executar ping baseado no SO
        try:
            system = platform.system().lower()
            if system == "windows":
                cmd = ["ping", "-n", "4", target]
            else:
                cmd = ["ping", "-c", "4", target]
                
            self.console.print(f"\nüì° Executando ping para {target}...")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            # Criar tabela de resultados
            ping_table = Table(
                title=f"üì° Resultados do Ping - {target}",
                box=box.ROUNDED,
                border_style="yellow"
            )
            
            ping_table.add_column("M√©trica", style="bold cyan", width=20)
            ping_table.add_column("Valor", style="white", width=30)
            ping_table.add_column("An√°lise", style="dim white", width=25)
            
            if result.returncode == 0:
                # Ping bem-sucedido
                ping_table.add_row("Status", "‚úÖ Sucesso", "Host acess√≠vel")
                
                # Parsing b√°sico dos resultados (funciona para maioria dos casos)
                output = result.stdout.lower()
                
                if "tempo" in output or "time" in output:
                    # Tentar extrair tempo m√©dio (simplificado)
                    ping_table.add_row("Conectividade", "üü¢ Excelente", "Resposta recebida")
                else:
                    ping_table.add_row("Conectividade", "üü° Limitada", "Resposta parcial")
                    
                # An√°lise de lat√™ncia (estimada)
                if "ms" in output:
                    ping_table.add_row("Lat√™ncia", "Detectada", "Verificar sa√≠da completa")
                    
            else:
                # Ping falhou
                ping_table.add_row("Status", "‚ùå Falha", "Host inacess√≠vel")
                ping_table.add_row("Conectividade", "üî¥ Sem resposta", "Host down ou firewall")
                
            self.console.print("\n")
            self.console.print(ping_table)
            
            # Exibir sa√≠da completa do ping
            self.console.print(Panel(
                result.stdout if result.stdout else result.stderr,
                title="üìã Sa√≠da Completa do Ping",
                border_style="blue"
            ))
            
        except subprocess.TimeoutExpired:
            self.console.print(Panel(
                "‚è∞ Timeout: O comando ping demorou muito para responder.\n"
                "Isso pode indicar:\n"
                "‚Ä¢ Host muito distante ou lento\n"
                "‚Ä¢ Perda de pacotes na rede\n"
                "‚Ä¢ Firewall bloqueando ICMP",
                title="Timeout",
                border_style="red"
            ))
            
        except Exception as e:
            self.console.print(Panel(
                f"‚ùå Erro ao executar ping: {str(e)}",
                title="Erro",
                border_style="red"
            ))
            
        # Interpreta√ß√£o dos resultados
        interpretation = """
üìä Interpreta√ß√£o dos Resultados de Ping:

‚è±Ô∏è Lat√™ncia (tempo de resposta):
‚Ä¢ < 10ms: Excelente (rede local)
‚Ä¢ 10-50ms: Muito bom (conex√£o banda larga)
‚Ä¢ 50-100ms: Bom (conex√£o nacional)
‚Ä¢ 100-200ms: Aceit√°vel (conex√£o internacional)
‚Ä¢ > 200ms: Lento (pode afetar aplica√ß√µes)

üì¶ Perda de pacotes:
‚Ä¢ 0%: Conex√£o est√°vel
‚Ä¢ 1-5%: Aceit√°vel para maioria das aplica√ß√µes
‚Ä¢ > 5%: Problemas de conectividade

üîç Troubleshooting:
‚Ä¢ Sem resposta: Host down ou firewall bloqueando ICMP
‚Ä¢ Timeout: Rede congestionada ou rota longa
‚Ä¢ "Destination unreachable": Problema de roteamento
        """
        
        self.console.print(Panel(interpretation.strip(), title="üìö Interpreta√ß√£o", border_style="green"))
        
        Prompt.ask("\nPressione Enter para continuar")
        
    async def dns_lookup_demo(self):
        """Demo de consulta DNS"""
        
        self.console.print(Panel(
            "üîç Consulta e An√°lise DNS\n\n"
            "O DNS traduz nomes de dom√≠nio em endere√ßos IP.\n"
            "Vamos analisar registros DNS de um dom√≠nio.",
            title="An√°lise DNS",
            border_style="purple"
        ))
        
        domain = Prompt.ask("\nüåê Digite o dom√≠nio para an√°lise", default="google.com")
        
        # Tabela de resultados DNS
        dns_table = Table(
            title=f"üîç An√°lise DNS - {domain}",
            box=box.ROUNDED,
            border_style="purple"
        )
        
        dns_table.add_column("Tipo", style="bold cyan", width=15)
        dns_table.add_column("Resultado", style="white", width=35)
        dns_table.add_column("An√°lise", style="dim white", width=25)
        
        try:
            # Resolu√ß√£o A (IPv4)
            try:
                ipv4_result = socket.gethostbyname(domain)
                dns_table.add_row("A (IPv4)", ipv4_result, "Endere√ßo IPv4 principal")
                
                # Verificar se √© IP privado
                try:
                    ip_obj = ipaddress.ip_address(ipv4_result)
                    if ip_obj.is_private:
                        dns_table.add_row("Tipo IP", "üè† Privado", "Rede interna")
                    else:
                        dns_table.add_row("Tipo IP", "üåê P√∫blico", "Acess√≠vel globalmente")
                except:
                    pass
                    
            except socket.gaierror:
                dns_table.add_row("A (IPv4)", "‚ùå N√£o encontrado", "Dom√≠nio inexistente")
                
            # FQDN
            try:
                fqdn = socket.getfqdn(domain)
                if fqdn != domain:
                    dns_table.add_row("FQDN", fqdn, "Nome totalmente qualificado")
                else:
                    dns_table.add_row("FQDN", "Mesmo que entrada", "J√° totalmente qualificado")
            except:
                dns_table.add_row("FQDN", "Erro na consulta", "Falha na resolu√ß√£o")
                
            # Tentativa de resolu√ß√£o reversa
            try:
                if 'ipv4_result' in locals():
                    reverse_dns = socket.gethostbyaddr(ipv4_result)
                    dns_table.add_row("PTR (Reverso)", reverse_dns[0], "Resolu√ß√£o reversa IP->Nome")
            except:
                dns_table.add_row("PTR (Reverso)", "N√£o configurado", "Sem registro PTR")
                
        except Exception as e:
            dns_table.add_row("Erro Geral", str(e), "Falha na consulta DNS")
            
        self.console.print("\n")
        self.console.print(dns_table)
        
        # An√°lise adicional de DNS
        dns_analysis = """
üîç An√°lise de Seguran√ßa DNS:

üìã Tipos de registros DNS:
‚Ä¢ A: Mapeia nome para IPv4
‚Ä¢ AAAA: Mapeia nome para IPv6
‚Ä¢ CNAME: Alias para outro nome
‚Ä¢ MX: Servidores de email
‚Ä¢ TXT: Informa√ß√µes textuais/verifica√ß√£o
‚Ä¢ PTR: Resolu√ß√£o reversa (IP -> nome)

üõ°Ô∏è Seguran√ßa DNS:
‚Ä¢ DNS over HTTPS (DoH): Criptografa consultas
‚Ä¢ DNS over TLS (DoT): Protege contra espionagem
‚Ä¢ DNSSEC: Valida autenticidade dos registros
‚Ä¢ Servidores DNS seguros: 1.1.1.1, 8.8.8.8, 9.9.9.9

‚ö†Ô∏è Ataques DNS comuns:
‚Ä¢ DNS Spoofing: Respostas falsas
‚Ä¢ DNS Hijacking: Redirecionamento malicioso
‚Ä¢ DNS Tunneling: Exfiltra√ß√£o de dados
‚Ä¢ Cache Poisoning: Contamina√ß√£o do cache
        """
        
        self.console.print(Panel(dns_analysis.strip(), title="üõ°Ô∏è Seguran√ßa DNS", border_style="green"))
        
        Prompt.ask("\nPressione Enter para continuar")