"""
Digital Forensics Demo Module
Demonstra√ß√µes de an√°lise forense digital e investiga√ß√£o de arquivos
"""

import os
import hashlib
import mimetypes
from pathlib import Path
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt
from rich import box
import base64

class ForensicsDemo:
    """Demonstra√ß√µes interativas de forense digital"""
    
    def __init__(self, console: Console):
        self.console = console
        
    async def run(self):
        """Loop principal dos demos de forense"""
        
        while True:
            self.show_forensics_menu()
            
            choice = Prompt.ask(
                "\nüïµÔ∏è Escolha o demo forense",
                choices=['1', '2', '3', '4', 'b'],
                default='b'
            )
            
            if choice == '1':
                await self.file_analysis_demo()
            elif choice == '2':
                await self.metadata_extraction_demo()
            elif choice == '3':
                await self.hash_verification_demo()
            elif choice == '4':
                await self.hidden_data_demo()
            elif choice == 'b':
                break
                
    def show_forensics_menu(self):
        """Exibe menu dos demos forenses"""
        
        menu_table = Table(
            title="üïµÔ∏è Laborat√≥rio de Forense Digital",
            box=box.ROUNDED,
            border_style="magenta"
        )
        
        menu_table.add_column("Op√ß√£o", style="bold yellow", width=8)
        menu_table.add_column("Demo", style="bold white", width=25)
        menu_table.add_column("Aprenda Sobre", style="dim white", width=35)
        
        demos = [
            ("1", "An√°lise de Arquivos", "Identifica√ß√£o de tipos e propriedades"),
            ("2", "Extra√ß√£o de Metadados", "Informa√ß√µes ocultas em arquivos"),
            ("3", "Verifica√ß√£o de Integridade", "Hashes e detec√ß√£o de altera√ß√µes"),
            ("4", "Dados Ocultos", "Esteganografia e dados escondidos"),
            ("B", "Voltar ao Menu Principal", "Retornar √† aplica√ß√£o principal")
        ]
        
        for option, demo, description in demos:
            menu_table.add_row(option, demo, description)
            
        self.console.print("\n")
        self.console.print(menu_table, justify="center")
        
    async def file_analysis_demo(self):
        """Demo de an√°lise de arquivos"""
        
        self.console.print(Panel(
            "üìÅ An√°lise Forense de Arquivos\n\n"
            "An√°lise detalhada de propriedades, tipo e caracter√≠sticas de arquivos.\n"
            "Fundamental para investiga√ß√µes digitais.",
            title="An√°lise de Arquivos",
            border_style="magenta"
        ))
        
        # Permitir usu√°rio escolher arquivo ou criar exemplo
        choice = Prompt.ask(
            "\nüìÅ Escolha uma op√ß√£o",
            choices=['1', '2'],
            default='2'
        )
        
        if choice == '1':
            file_path = Prompt.ask("Digite o caminho do arquivo")
            if not os.path.exists(file_path):
                self.console.print("‚ùå Arquivo n√£o encontrado!")
                return
        else:
            # Criar arquivo de exemplo para an√°lise
            example_content = """
CyberMentor AI - Arquivo de Exemplo para An√°lise Forense

Este arquivo foi criado para demonstrar t√©cnicas de an√°lise forense digital.
Cont√©m informa√ß√µes b√°sicas que podem ser extra√≠das durante uma investiga√ß√£o.

Data de cria√ß√£o: """ + datetime.now().isoformat() + """
Usu√°rio: Demo User
Sistema: Windows/Linux/Mac

Dados importantes:
- Logs de acesso
- Configura√ß√µes de sistema
- Evid√™ncias digitais
            """
            
            file_path = "exemplo_forense.txt"
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(example_content.strip())
                
            self.console.print(f"‚úÖ Arquivo de exemplo criado: {file_path}")
            
        # An√°lise do arquivo
        try:
            file_info = os.stat(file_path)
            
            # Tabela de an√°lise
            analysis_table = Table(
                title=f"üîç An√°lise Forense - {os.path.basename(file_path)}",
                box=box.ROUNDED,
                border_style="magenta"
            )
            
            analysis_table.add_column("Propriedade", style="bold cyan", width=20)
            analysis_table.add_column("Valor", style="white", width=35)
            analysis_table.add_column("Significado Forense", style="dim white", width=25)
            
            # Informa√ß√µes b√°sicas do arquivo
            analysis_table.add_row(
                "Nome do Arquivo",
                os.path.basename(file_path),
                "Identidade do arquivo"
            )
            
            analysis_table.add_row(
                "Caminho Completo",
                os.path.abspath(file_path),
                "Localiza√ß√£o no sistema"
            )
            
            analysis_table.add_row(
                "Tamanho",
                f"{file_info.st_size} bytes",
                "Volume de dados"
            )
            
            # Timestamps (cruciais para forense)
            analysis_table.add_row(
                "Criado em",
                datetime.fromtimestamp(file_info.st_ctime).strftime('%Y-%m-%d %H:%M:%S'),
                "Quando foi criado"
            )
            
            analysis_table.add_row(
                "Modificado em",
                datetime.fromtimestamp(file_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
                "√öltima altera√ß√£o"
            )
            
            analysis_table.add_row(
                "Acessado em",
                datetime.fromtimestamp(file_info.st_atime).strftime('%Y-%m-%d %H:%M:%S'),
                "√öltimo acesso"
            )
            
            # Tipo de arquivo
            mime_type, _ = mimetypes.guess_type(file_path)
            analysis_table.add_row(
                "Tipo MIME",
                mime_type or "Desconhecido",
                "Tipo de conte√∫do"
            )
            
            # Permiss√µes (Unix/Linux)
            try:
                permissions = oct(file_info.st_mode)[-3:]
                analysis_table.add_row(
                    "Permiss√µes",
                    permissions,
                    "Controle de acesso"
                )
            except:
                analysis_table.add_row(
                    "Permiss√µes",
                    "N/A (Windows)",
                    "Sistema Windows"
                )
                
            self.console.print("\n")
            self.console.print(analysis_table)
            
            # Hash do arquivo para integridade
            with open(file_path, 'rb') as f:
                file_content = f.read()
                md5_hash = hashlib.md5(file_content).hexdigest()
                sha256_hash = hashlib.sha256(file_content).hexdigest()
                
            hash_table = Table(
                title="üîê Hashes de Integridade",
                box=box.SIMPLE,
                border_style="blue"
            )
            
            hash_table.add_column("Algoritmo", style="bold cyan", width=10)
            hash_table.add_column("Hash", style="white", width=50)
            hash_table.add_column("Uso Forense", style="dim white", width=20)
            
            hash_table.add_row("MD5", md5_hash, "Identifica√ß√£o r√°pida")
            hash_table.add_row("SHA256", sha256_hash, "Integridade garantida")
            
            self.console.print("\n")
            self.console.print(hash_table)
            
            # Limpeza do arquivo de exemplo
            if file_path == "exemplo_forense.txt":
                os.remove(file_path)
                
        except Exception as e:
            self.console.print(Panel(
                f"‚ùå Erro na an√°lise: {str(e)}",
                title="Erro",
                border_style="red"
            ))
            
        # Guia educacional
        forensics_guide = """
üïµÔ∏è Princ√≠pios de An√°lise Forense:

üìÖ Timeline Analysis:
‚Ä¢ Created: Quando o arquivo foi criado
‚Ä¢ Modified: √öltima altera√ß√£o do conte√∫do
‚Ä¢ Accessed: √öltimo acesso de leitura
‚Ä¢ Changed: Altera√ß√£o de metadados

üîç Tipos de Evid√™ncia:
‚Ä¢ Documentos de texto: Conte√∫do e autoria
‚Ä¢ Imagens: EXIF data, localiza√ß√£o GPS
‚Ä¢ Logs: Registro de atividades
‚Ä¢ Execut√°veis: Malware, backdoors

üõ°Ô∏è Cadeia de Cust√≥dia:
‚Ä¢ Hash para provar integridade
‚Ä¢ Documenta√ß√£o de manuseio
‚Ä¢ Timestamps precisos
‚Ä¢ C√≥pias forenses bit-a-bit
        """
        
        self.console.print(Panel(forensics_guide.strip(), title="üìö Guia Forense", border_style="green"))
        
        Prompt.ask("\nPressione Enter para continuar")
        
    async def metadata_extraction_demo(self):
        """Demo de extra√ß√£o de metadados"""
        
        self.console.print(Panel(
            "üìä Extra√ß√£o de Metadados\n\n"
            "Metadados cont√™m informa√ß√µes valiosas sobre arquivos:\n"
            "autor, software usado, localiza√ß√£o GPS, etc.",
            title="Extra√ß√£o de Metadados",
            border_style="blue"
        ))
        
        # Simular metadados de diferentes tipos de arquivo
        metadata_examples = {
            "Documento Word": {
                "Autor": "Jo√£o Silva",
                "Software": "Microsoft Word 2019",
                "Data de Cria√ß√£o": "2023-10-15 14:30:00",
                "√öltima Modifica√ß√£o": "2023-10-16 09:15:00",
                "Tempo de Edi√ß√£o": "2 horas 45 minutos",
                "Empresa": "TechCorp Ltda",
                "Vers√£o": "16.0.4266.1001"
            },
            "Foto Digital": {
                "C√¢mera": "Canon EOS R5",
                "ISO": "800",
                "Abertura": "f/2.8",
                "Velocidade": "1/200s",
                "GPS Latitude": "-23.5505¬∞ S",
                "GPS Longitude": "-46.6333¬∞ W",
                "Data/Hora": "2023-10-15 16:42:33",
                "Software": "Adobe Lightroom"
            },
            "PDF": {
                "Criador": "Adobe Acrobat Pro",
                "T√≠tulo": "Relat√≥rio Confidencial",
                "Assunto": "An√°lise de Seguran√ßa",
                "Palavras-chave": "seguran√ßa, auditoria, compliance",
                "Data de Cria√ß√£o": "2023-10-14 10:00:00",
                "Modificado": "2023-10-15 15:30:00",
                "P√°ginas": "25"
            }
        }
        
        # Escolha do tipo de arquivo
        file_type = Prompt.ask(
            "üìÅ Escolha o tipo de arquivo para an√°lise",
            choices=['word', 'foto', 'pdf'],
            default='foto'
        )
        
        type_map = {
            'word': 'Documento Word',
            'foto': 'Foto Digital', 
            'pdf': 'PDF'
        }
        
        selected_type = type_map[file_type]
        metadata = metadata_examples[selected_type]
        
        # Tabela de metadados
        metadata_table = Table(
            title=f"üìä Metadados Extra√≠dos - {selected_type}",
            box=box.ROUNDED,
            border_style="blue"
        )
        
        metadata_table.add_column("Campo", style="bold cyan", width=20)
        metadata_table.add_column("Valor", style="white", width=30)
        metadata_table.add_column("Import√¢ncia Forense", style="dim white", width=25)
        
        # Import√¢ncia forense por campo
        forensic_importance = {
            "Autor": "üë§ Identifica criador",
            "Software": "üíª Ambiente usado",
            "Data de Cria√ß√£o": "üìÖ Timeline crucial",
            "√öltima Modifica√ß√£o": "üîÑ Altera√ß√µes",
            "Tempo de Edi√ß√£o": "‚è±Ô∏è Esfor√ßo investido",
            "Empresa": "üè¢ Organiza√ß√£o",
            "C√¢mera": "üì∑ Dispositivo origem",
            "GPS Latitude": "üåç Localiza√ß√£o exata",
            "GPS Longitude": "üåç Localiza√ß√£o exata",
            "Criador": "üë®‚Äçüíª Software criador",
            "T√≠tulo": "üìÑ Identifica√ß√£o",
            "Assunto": "üìù Contexto",
            "Palavras-chave": "üîç Classifica√ß√£o"
        }
        
        for campo, valor in metadata.items():
            importancia = forensic_importance.get(campo, "‚ÑπÔ∏è Informacional")
            metadata_table.add_row(campo, valor, importancia)
            
        self.console.print("\n")
        self.console.print(metadata_table)
        
        # An√°lise espec√≠fica por tipo
        if file_type == 'foto':
            location_analysis = """
üåç An√°lise de Localiza√ß√£o GPS:

Coordenadas encontradas: -23.5505¬∞ S, -46.6333¬∞ W
üìç Localiza√ß√£o: S√£o Paulo, SP, Brasil
üè¢ Regi√£o: Centro da cidade

üïµÔ∏è Valor Forense:
‚Ä¢ Prova presen√ßa f√≠sica em local espec√≠fico
‚Ä¢ Correla√ß√£o com outros eventos
‚Ä¢ Timeline de movimenta√ß√£o
‚Ä¢ Contexto geogr√°fico da evid√™ncia
            """
            
            self.console.print(Panel(location_analysis.strip(), title="üåç An√°lise GPS", border_style="green"))
            
        elif file_type == 'word':
            authorship_analysis = """
üë§ An√°lise de Autoria:

Autor identificado: Jo√£o Silva
üè¢ Empresa: TechCorp Ltda
‚è±Ô∏è Tempo de edi√ß√£o: 2h45min

üïµÔ∏è Valor Forense:
‚Ä¢ Identifica√ß√£o do autor original
‚Ä¢ V√≠nculo com organiza√ß√£o espec√≠fica
‚Ä¢ Tempo investido na cria√ß√£o
‚Ä¢ Hist√≥rico de modifica√ß√µes
            """
            
            self.console.print(Panel(authorship_analysis.strip(), title="üë§ An√°lise de Autoria", border_style="yellow"))
            
        # Guia de metadados
        metadata_guide = """
üìä Tipos de Metadados Importantes:

üìÑ Documentos Office:
‚Ä¢ Autor, empresa, tempo de edi√ß√£o
‚Ä¢ Vers√£o do software, templates
‚Ä¢ Hist√≥rico de revis√µes, coment√°rios ocultos

üì∑ Imagens Digitais (EXIF):
‚Ä¢ Modelo da c√¢mera, configura√ß√µes
‚Ä¢ Data/hora precisa, GPS
‚Ä¢ Software de edi√ß√£o usado

üéµ Arquivos de √Åudio:
‚Ä¢ Artista, √°lbum, g√™nero
‚Ä¢ Software de grava√ß√£o/edi√ß√£o
‚Ä¢ Taxa de bits, dura√ß√£o

üíª Arquivos de Sistema:
‚Ä¢ Datas de cria√ß√£o/modifica√ß√£o/acesso
‚Ä¢ Usu√°rio propriet√°rio, permiss√µes
‚Ä¢ Assinatura digital, checksum
        """
        
        self.console.print(Panel(metadata_guide.strip(), title="üìö Guia de Metadados", border_style="purple"))
        
        Prompt.ask("\nPressione Enter para continuar")
        
    async def hash_verification_demo(self):
        """Demo de verifica√ß√£o de integridade com hashes"""
        
        self.console.print(Panel(
            "üîê Verifica√ß√£o de Integridade de Arquivos\n\n"
            "Hashes provam que um arquivo n√£o foi alterado.\n"
            "Fundamental para manter cadeia de cust√≥dia em forense.",
            title="Verifica√ß√£o de Integridade",
            border_style="green"
        ))
        
        # Criar arquivo de teste
        original_content = "EVID√äNCIA DIGITAL - Arquivo original para teste de integridade"
        test_file = "teste_integridade.txt"
        
        with open(test_file, 'w') as f:
            f.write(original_content)
            
        # Hash original
        with open(test_file, 'rb') as f:
            file_data = f.read()
            original_md5 = hashlib.md5(file_data).hexdigest()
            original_sha256 = hashlib.sha256(file_data).hexdigest()
            
        self.console.print("‚úÖ Arquivo de teste criado com conte√∫do original")
        
        # Tabela com hashes originais
        original_table = Table(
            title="üîê Hashes Originais (Linha de Base)",
            box=box.ROUNDED,
            border_style="green"
        )
        
        original_table.add_column("Algoritmo", style="bold cyan", width=10)
        original_table.add_column("Hash Original", style="white", width=50)
        original_table.add_column("Status", style="bold green", width=15)
        
        original_table.add_row("MD5", original_md5, "‚úÖ BASELINE")
        original_table.add_row("SHA256", original_sha256, "‚úÖ BASELINE")
        
        self.console.print("\n")
        self.console.print(original_table)
        
        # Simular altera√ß√£o do arquivo
        self.console.print("\nüîÑ Simulando altera√ß√£o do arquivo...")
        
        choice = Prompt.ask(
            "Escolha o tipo de altera√ß√£o",
            choices=['1', '2', '3'],
            default='2'
        )
        
        if choice == '1':
            # Altera√ß√£o sutil
            modified_content = original_content + " "  # Apenas um espa√ßo
            change_description = "Adicionado um espa√ßo no final"
        elif choice == '2':
            # Altera√ß√£o vis√≠vel
            modified_content = original_content + " - ARQUIVO MODIFICADO"
            change_description = "Texto adicional vis√≠vel"
        else:
            # Altera√ß√£o de um byte
            modified_content = original_content.replace('E', 'e', 1)
            change_description = "Uma letra mai√∫scula alterada para min√∫scula"
            
        # Salvar arquivo modificado
        with open(test_file, 'w') as f:
            f.write(modified_content)
            
        # Calcular novos hashes
        with open(test_file, 'rb') as f:
            modified_data = f.read()
            new_md5 = hashlib.md5(modified_data).hexdigest()
            new_sha256 = hashlib.sha256(modified_data).hexdigest()
            
        # Compara√ß√£o de hashes
        comparison_table = Table(
            title="üîç Verifica√ß√£o de Integridade - Compara√ß√£o",
            box=box.ROUNDED,
            border_style="red"
        )
        
        comparison_table.add_column("Algoritmo", style="bold cyan", width=10)
        comparison_table.add_column("Hash Original", style="dim white", width=32)
        comparison_table.add_column("Hash Atual", style="white", width=32)
        comparison_table.add_column("Status", style="bold", width=15)
        
        md5_status = "‚úÖ √çNTEGRO" if original_md5 == new_md5 else "üö® ALTERADO"
        sha256_status = "‚úÖ √çNTEGRO" if original_sha256 == new_sha256 else "üö® ALTERADO"
        
        comparison_table.add_row(
            "MD5", 
            original_md5[:30] + "...", 
            new_md5[:30] + "...", 
            md5_status
        )
        
        comparison_table.add_row(
            "SHA256",
            original_sha256[:30] + "...",
            new_sha256[:30] + "...",
            sha256_status
        )
        
        self.console.print("\n")
        self.console.print(comparison_table)
        
        # An√°lise da altera√ß√£o
        if original_md5 != new_md5:
            alert_message = f"""
üö® ALTERA√á√ÉO DETECTADA!

Modifica√ß√£o: {change_description}
Impacto: Integridade do arquivo comprometida
Status Legal: Evid√™ncia pode ser questionada

üïµÔ∏è An√°lise Forense:
‚Ä¢ Arquivo foi modificado ap√≥s hash inicial
‚Ä¢ Cadeia de cust√≥dia comprometida
‚Ä¢ Necess√°ria nova documenta√ß√£o
‚Ä¢ Hash anterior n√£o √© mais v√°lido

‚öñÔ∏è Implica√ß√µes Legais:
‚Ä¢ Evid√™ncia pode ser inadmiss√≠vel
‚Ä¢ Necess√°rio justificar altera√ß√£o
‚Ä¢ Procedimentos de re-hash necess√°rios
            """
            
            self.console.print(Panel(alert_message.strip(), title="üö® Alerta de Integridade", border_style="red"))
        else:
            self.console.print(Panel(
                "‚úÖ Arquivo mant√©m integridade\n"
                "Hash permanece inalterado\n"
                "Evid√™ncia preservada corretamente",
                title="‚úÖ Integridade Verificada",
                border_style="green"
            ))
            
        # Limpeza
        os.remove(test_file)
        
        # Guia de boas pr√°ticas
        best_practices = """
üõ°Ô∏è Boas Pr√°ticas de Integridade:

üìã Documenta√ß√£o Necess√°ria:
‚Ä¢ Hash imediatamente ap√≥s coleta
‚Ä¢ Registrar algoritmo usado (SHA256 recomendado)
‚Ä¢ Timestamp preciso da opera√ß√£o
‚Ä¢ Identifica√ß√£o do respons√°vel

üîê M√∫ltiplos Algoritmos:
‚Ä¢ MD5: R√°pido mas vulner√°vel
‚Ä¢ SHA1: Deprecated, evitar
‚Ä¢ SHA256: Padr√£o atual recomendado
‚Ä¢ SHA3: Pr√≥xima gera√ß√£o

üìÅ Armazenamento Seguro:
‚Ä¢ C√≥pias em m√≠dias write-protected
‚Ä¢ M√∫ltiplas c√≥pias em locais separados
‚Ä¢ Controle de acesso rigoroso
‚Ä¢ Verifica√ß√£o peri√≥dica
        """
        
        self.console.print(Panel(best_practices.strip(), title="üõ°Ô∏è Boas Pr√°ticas", border_style="blue"))
        
        Prompt.ask("\nPressione Enter para continuar")
        
    async def hidden_data_demo(self):
        """Demo de detec√ß√£o de dados ocultos"""
        
        self.console.print(Panel(
            "üïµÔ∏è Detec√ß√£o de Dados Ocultos\n\n"
            "Dados podem ser escondidos em arquivos usando v√°rias t√©cnicas:\n"
            "esteganografia, espa√ßos em branco, campos n√£o utilizados.",
            title="Dados Ocultos",
            border_style="cyan"
        ))
        
        # Demonstrar diferentes t√©cnicas de oculta√ß√£o
        techniques_table = Table(
            title="üé≠ T√©cnicas de Oculta√ß√£o de Dados",
            box=box.ROUNDED,
            border_style="cyan"
        )
        
        techniques_table.add_column("T√©cnica", style="bold cyan", width=20)
        techniques_table.add_column("Como Funciona", style="white", width=35)
        techniques_table.add_column("Detec√ß√£o", style="dim white", width=25)
        
        techniques = [
            ("Esteganografia LSB", "Altera bits menos significativos", "An√°lise estat√≠stica"),
            ("Metadados Ocultos", "Dados em campos n√£o vis√≠veis", "Extra√ß√£o de metadados"),
            ("Espa√ßos em Branco", "Usa espa√ßos/tabs como c√≥digo", "An√°lise de whitespace"),
            ("Coment√°rios HTML", "Texto oculto em coment√°rios", "Parsing de c√≥digo"),
            ("Alternate Data Streams", "Streams NTFS alternativos", "Ferramentas espec√≠ficas"),
            ("Arquivos Concatenados", "M√∫ltiplos arquivos unidos", "An√°lise de assinaturas")
        ]
        
        for technique, how_it_works, detection in techniques:
            techniques_table.add_row(technique, how_it_works, detection)
            
        self.console.print("\n")
        self.console.print(techniques_table)
        
        # Demo interativo de dados ocultos
        demo_choice = Prompt.ask(
            "\nüîç Escolha uma t√©cnica para demonstrar",
            choices=['1', '2', '3'],
            default='2'
        )
        
        if demo_choice == '1':
            # Esteganografia simulada
            self.console.print("\nüé≠ Demo: Esteganografia em Texto")
            
            visible_text = "Esta √© uma mensagem normal"
            hidden_message = "DADOS SECRETOS"
            
            # Simular esconder dados alterando capitaliza√ß√£o
            steganographic_text = ""
            hidden_index = 0
            
            for char in visible_text:
                if char.isalpha() and hidden_index < len(hidden_message):
                    # Use mai√∫scula para '1' e min√∫scula para '0' (ASCII simplificado)
                    hidden_char = hidden_message[hidden_index]
                    if ord(hidden_char) % 2 == 0:  # Par = mai√∫scula
                        steganographic_text += char.upper()
                    else:  # √çmpar = min√∫scula
                        steganographic_text += char.lower()
                    hidden_index += 1
                else:
                    steganographic_text += char
                    
            steg_demo = f"""
üìù Texto Original: {visible_text}
üé≠ Texto com Dados Ocultos: {steganographic_text}
üîç Dados Escondidos: {hidden_message}

üí° T√©cnica: Capitaliza√ß√£o representa bits dos dados ocultos
üïµÔ∏è Detec√ß√£o: An√°lise de padr√µes de capitaliza√ß√£o anormais
            """
            
            self.console.print(Panel(steg_demo.strip(), title="üé≠ Esteganografia Demo", border_style="purple"))
            
        elif demo_choice == '2':
            # Metadados ocultos
            self.console.print("\nüìä Demo: Metadados Ocultos")
            
            visible_metadata = {
                "T√≠tulo": "Relat√≥rio Anual",
                "Autor": "Jo√£o Silva",
                "Assunto": "Vendas e Marketing"
            }
            
            hidden_metadata = {
                "Custom_Field_1": "Projeto_Confidencial_X",
                "Internal_Code": "ALPHA-2023-SECRET",
                "Classification": "TOP_SECRET",
                "Real_Author": "Agente_007"
            }
            
            metadata_demo = f"""
üëÅÔ∏è Metadados Vis√≠veis:
{chr(10).join([f'‚Ä¢ {k}: {v}' for k, v in visible_metadata.items()])}

üïµÔ∏è Metadados Ocultos Encontrados:
{chr(10).join([f'‚Ä¢ {k}: {v}' for k, v in hidden_metadata.items()])}

üí° T√©cnica: Campos customizados n√£o exibidos em visualizadores normais
üîç Detec√ß√£o: Extra√ß√£o completa de todos os metadados
            """
            
            self.console.print(Panel(metadata_demo.strip(), title="üìä Metadados Ocultos", border_style="blue"))
            
        else:
            # Espa√ßos em branco
            self.console.print("\nüî§ Demo: Dados em Espa√ßos em Branco")
            
            normal_text = "Esta linha parece normal"
            # Simular espa√ßos/tabs codificando dados
            hidden_text_with_spaces = "Esta linha parece normal    \t  \t\t   \t"
            
            # Decodificar espa√ßos (espa√ßo = 0, tab = 1)
            trailing_chars = hidden_text_with_spaces[len(normal_text):]
            binary_data = trailing_chars.replace(' ', '0').replace('\t', '1')
            
            whitespace_demo = f"""
üìù Texto Aparentemente Normal:
"{normal_text}"

üîç Texto com Dados Ocultos:
"{hidden_text_with_spaces}"

üíª Caracteres Invis√≠veis Decodificados:
Espa√ßos/Tabs: {repr(trailing_chars)}
Bin√°rio: {binary_data}
Poss√≠vel Mensagem: [dados bin√°rios ocultos]

üí° T√©cnica: Espa√ßos e tabs no final de linhas codificam dados
üïµÔ∏è Detec√ß√£o: Visualiza√ß√£o de whitespace ou an√°lise hexadecimal
            """
            
            self.console.print(Panel(whitespace_demo.strip(), title="üî§ Whitespace Steganography", border_style="yellow"))
            
        # Ferramentas de detec√ß√£o
        detection_tools = """
üõ†Ô∏è Ferramentas para Detec√ß√£o de Dados Ocultos:

üìä An√°lise de Metadados:
‚Ä¢ ExifTool: Extra√ß√£o completa de metadados
‚Ä¢ MediaInfo: An√°lise de arquivos multim√≠dia
‚Ä¢ strings: Busca por strings leg√≠veis

üé≠ Detec√ß√£o de Esteganografia:
‚Ä¢ StegDetect: Detec√ß√£o automatizada
‚Ä¢ StegBreak: An√°lise estat√≠stica
‚Ä¢ Binwalk: An√°lise de assinaturas de arquivo

üîç An√°lise Hexadecimal:
‚Ä¢ HxD, Hex Workshop: Editores hexadecimais
‚Ä¢ xxd: Visualiza√ß√£o hex em linha de comando
‚Ä¢ file: Identifica√ß√£o de tipos de arquivo

üíª An√°lise de Sistema de Arquivos:
‚Ä¢ LADS: Alternate Data Streams (Windows)
‚Ä¢ find: Busca avan√ßada (Linux/Mac)
‚Ä¢ PowerShell: Get-Item -Stream (Windows)
        """
        
        self.console.print(Panel(detection_tools.strip(), title="üõ†Ô∏è Ferramentas de Detec√ß√£o", border_style="green"))
        
        Prompt.ask("\nPressione Enter para continuar")