"""
M√≥dulo de Forense Digital - CyberMentor AI
An√°lise de arquivos, metadados e evid√™ncias digitais
"""

import streamlit as st
import os
import hashlib
try:
    import magic
    MAGIC_AVAILABLE = True
except ImportError:
    MAGIC_AVAILABLE = False
    st.warning("‚ö†Ô∏è python-magic n√£o instalado. Detec√ß√£o de tipo ser√° limitada.")
from PIL import Image
from PIL.ExifTags import TAGS
import pandas as pd
from datetime import datetime
import io
import mimetypes

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="üïµÔ∏è Forense Digital - CyberMentor AI",
    page_icon="üïµÔ∏è",
    layout="wide"
)

# CSS b√°sico e funcional
st.markdown("""
<style>
.main {
    background-color: #1a1a1a;
    color: #ffffff;
}

[data-testid="stExpander"] div[role="button"] {
    background-color: #2a2a2a !important;
    color: #ffffff !important;
    border: 1px solid #444444 !important;
    border-radius: 5px !important;
    padding: 10px !important;
}

[data-testid="stExpander"] .streamlit-expanderContent {
    background-color: #2a2a2a !important;
    color: #ffffff !important;
    border: 1px solid #444444 !important;
    border-top: none !important;
    border-radius: 0 0 5px 5px !important;
}

[data-testid="stExpander"] * {
    color: #ffffff !important;
}
</style>
""", unsafe_allow_html=True)

# CSS b√°sico
st.markdown("""
<style>
.forensic-header {
    background-color: #2a2a2a;
    color: #ffffff;
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #444444;
    text-align: center;
    margin: 15px 0;
}

.evidence-card {
    background-color: #2a2a2a;
    color: #ffffff;
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #444444;
    margin: 15px 0;
}

.analysis-result {
    background-color: #2a2a2a;
    color: #ffffff;
    padding: 15px;
    border-radius: 10px;
    border: 1px solid #444444;
    margin: 15px 0;
}

.warning-box {
    background-color: #2a2a2a;
    color: #ffffff;
    padding: 15px;
    border-radius: 10px;
    border: 1px solid #444444;
    margin: 15px 0;
}

.success-box {
    background-color: #2a2a2a;
    color: #ffffff;
    padding: 15px;
    border-radius: 10px;
    border: 1px solid #444444;
    margin: 15px 0;
}
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
<div class="forensic-header">
    <h1>üïµÔ∏è Laborat√≥rio de Forense Digital</h1>
    <p><strong>Investiga√ß√£o e An√°lise de Evid√™ncias Digitais</strong></p>
    <p>üîç Metadados | üìÅ Tipos de Arquivo | üîê Hashes</p>
</div>
""", unsafe_allow_html=True)

# Fun√ß√£o para calcular hashes
def calcular_hashes(arquivo_bytes):
    """Calcula MD5, SHA1 e SHA256 do arquivo"""
    md5 = hashlib.md5(arquivo_bytes).hexdigest()
    sha1 = hashlib.sha1(arquivo_bytes).hexdigest()
    sha256 = hashlib.sha256(arquivo_bytes).hexdigest()
    return md5, sha1, sha256

# Fun√ß√£o para extrair metadados EXIF
def extrair_exif(imagem):
    """Extrai metadados EXIF de imagens"""
    try:
        exifdata = imagem.getexif()
        metadados = {}
        
        for tag_id in exifdata:
            tag = TAGS.get(tag_id, tag_id)
            data = exifdata.get(tag_id)
            if isinstance(data, bytes):
                data = data.decode('utf-8', errors='ignore')
            metadados[tag] = data
            
        return metadados
    except Exception as e:
        return {"Erro": str(e)}

# Fun√ß√£o para detectar tipo de arquivo
def detectar_tipo_arquivo(arquivo_bytes, nome_arquivo):
    """Detecta o tipo real do arquivo baseado no conte√∫do"""
    try:
        # Tipo baseado na extens√£o
        tipo_extensao, _ = mimetypes.guess_type(nome_arquivo)
        
        if MAGIC_AVAILABLE:
            # Usando python-magic para detec√ß√£o precisa
            tipo_real = magic.from_buffer(arquivo_bytes, mime=True)
        else:
            # Fallback: detec√ß√£o b√°sica por magic numbers
            magic_numbers = {
                b'\xFF\xD8\xFF': 'image/jpeg',
                b'\x89PNG': 'image/png',
                b'GIF87a': 'image/gif',
                b'GIF89a': 'image/gif',
                b'PK\x03\x04': 'application/zip',
                b'%PDF': 'application/pdf',
                b'MZ': 'application/x-executable'
            }
            
            tipo_real = "application/octet-stream"  # default
            for magic_bytes, mime_type in magic_numbers.items():
                if arquivo_bytes.startswith(magic_bytes):
                    tipo_real = mime_type
                    break
        
        return tipo_real, tipo_extensao
    except Exception as e:
        return f"Erro: {str(e)}", tipo_extensao

# Tabs principais
tab1, tab2, tab3, tab4 = st.tabs(["üîç An√°lise de Arquivo", "üìä Casos Famosos", "üéÆ Jogo Forense", "üìö Teoria"])

with tab1:
    st.subheader("üìÅ Upload e An√°lise de Evid√™ncia")
    
    arquivo_upload = st.file_uploader(
        "Selecione um arquivo para an√°lise forense:",
        type=None,  # Aceita qualquer tipo
        help="‚ö†Ô∏è Para fins educacionais apenas. N√£o fa√ßa upload de dados sens√≠veis reais!"
    )
    
    if arquivo_upload is not None:
        # Ler bytes do arquivo
        arquivo_bytes = arquivo_upload.read()
        tamanho_arquivo = len(arquivo_bytes)
        
        st.markdown("""
        <div class="evidence-card">
            <h3>üìã Informa√ß√µes B√°sicas da Evid√™ncia</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üìÑ Nome do Arquivo", arquivo_upload.name)
            
        with col2:
            st.metric("üìè Tamanho", f"{tamanho_arquivo:,} bytes")
            
        with col3:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            st.metric("‚è∞ An√°lise em", timestamp)
        
        # An√°lise de hashes
        st.markdown("""
        <div class="evidence-card">
            <h3>üîê An√°lise Criptogr√°fica</h3>
        </div>
        """, unsafe_allow_html=True)
        
        with st.spinner("Calculando hashes..."):
            md5, sha1, sha256 = calcular_hashes(arquivo_bytes)
        
        st.markdown(f"""
        <div class="analysis-result">
        <strong>MD5:</strong> {md5}<br>
        <strong>SHA1:</strong> {sha1}<br>
        <strong>SHA256:</strong> {sha256}
        </div>
        """, unsafe_allow_html=True)
        
        # Detec√ß√£o de tipo de arquivo
        st.markdown("""
        <div class="evidence-card">
            <h3>üîç An√°lise de Tipo de Arquivo</h3>
        </div>
        """, unsafe_allow_html=True)
        
        tipo_real, tipo_extensao = detectar_tipo_arquivo(arquivo_bytes, arquivo_upload.name)
        
        col1, col2 = st.columns(2)
        with col1:
            st.info(f"**Tipo por Extens√£o:** {tipo_extensao or 'Desconhecido'}")
        with col2:
            st.info(f"**Tipo Real (Magic Number):** {tipo_real}")
        
        # Verificar se h√° discrep√¢ncia
        if tipo_extensao and tipo_real and tipo_extensao != tipo_real:
            st.markdown("""
            <div class="warning-box">
                ‚ö†Ô∏è ALERTA: Discrep√¢ncia detectada entre extens√£o e conte√∫do real do arquivo!
                Poss√≠vel tentativa de mascaramento de arquivo malicioso.
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="success-box">
                ‚úÖ Tipo de arquivo consistente - Nenhuma discrep√¢ncia detectada.
            </div>
            """, unsafe_allow_html=True)
        
        # An√°lise espec√≠fica para imagens
        if tipo_real and tipo_real.startswith('image/'):
            st.markdown("""
            <div class="evidence-card">
                <h3>üì∏ An√°lise de Metadados EXIF</h3>
            </div>
            """, unsafe_allow_html=True)
            
            try:
                imagem = Image.open(io.BytesIO(arquivo_bytes))
                metadados = extrair_exif(imagem)
                
                if metadados and len(metadados) > 1:
                    # Criar DataFrame para exibir metadados
                    df_metadados = pd.DataFrame(list(metadados.items()), columns=['Campo', 'Valor'])
                    st.dataframe(df_metadados, use_container_width=True)
                    
                    # Verificar dados sens√≠veis
                    campos_sens√≠veis = ['GPS', 'DateTime', 'Make', 'Model', 'Software']
                    dados_encontrados = [campo for campo in campos_sens√≠veis if any(campo.lower() in str(k).lower() for k in metadados.keys())]
                    
                    if dados_encontrados:
                        st.warning(f"üîç **Dados potencialmente sens√≠veis encontrados:** {', '.join(dados_encontrados)}")
                        st.info("üí° **Dica forense:** Metadados podem revelar localiza√ß√£o, dispositivo usado, software e hor√°rios!")
                else:
                    st.info("üìù Nenhum metadado EXIF encontrado na imagem.")
                    
            except Exception as e:
                st.error(f"Erro ao processar imagem: {str(e)}")
        
        # An√°lise hexadecimal (primeiros bytes)
        st.markdown("""
        <div class="evidence-card">
            <h3>üî¢ An√°lise Hexadecimal (Magic Numbers)</h3>
        </div>
        """, unsafe_allow_html=True)
        
        primeiros_bytes = arquivo_bytes[:32]
        hex_string = ' '.join(f'{byte:02X}' for byte in primeiros_bytes)
        
        st.markdown(f"""
        <div class="analysis-result">
        <strong>Primeiros 32 bytes (HEX):</strong><br>
        {hex_string}
        </div>
        """, unsafe_allow_html=True)
        
        # Interpreta√ß√£o dos magic numbers
        magic_numbers = {
            'FFD8FF': 'JPEG Image',
            '89504E': 'PNG Image', 
            '474946': 'GIF Image',
            '504B03': 'ZIP/Office Document',
            '255044': 'PDF Document',
            '4D5A90': 'Windows Executable',
            '7F454C': 'Linux Executable (ELF)'
        }
        
        hex_inicio = hex_string.replace(' ', '')[:6]
        if hex_inicio in magic_numbers:
            st.success(f"üéØ **Magic Number identificado:** {magic_numbers[hex_inicio]}")
        else:
            st.info("üîç Magic number n√£o reconhecido na base de dados.")

with tab2:
    st.subheader("üìä Casos Famosos de Forense Digital")
    
    caso_selecionado = st.selectbox("Escolha um caso famoso:", [
        "üîç BTK Killer - Caught by Metadata",
        "üíª Anna Politkovskaya - Hard Drive Analysis", 
        "üì± San Bernardino iPhone - FBI vs Apple",
        "üåê Silk Road - Ross Ulbricht Digital Evidence"
    ])
    
    if "BTK" in caso_selecionado:
        st.markdown("""
        <div class="evidence-card">
            <h3>üîç Caso BTK Killer (Dennis Rader)</h3>
            <p><strong>Ano:</strong> 2005</p>
            <p><strong>Como foi pego:</strong> Metadados em documento do Word!</p>
            <p><strong>Evid√™ncia chave:</strong> Rader enviou um disquete para a pol√≠cia. 
            Os investigadores encontraram metadados no arquivo Word que continham:</p>
            <ul>
                <li>Nome do usu√°rio: "Dennis"</li>
                <li>√öltima modifica√ß√£o: Igreja Luterana Christ</li>
                <li>Software usado: Microsoft Word</li>
            </ul>
            <p><strong>Resultado:</strong> Pris√£o ap√≥s 30 anos! 10 assassinatos solucionados.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.warning("üí° **Li√ß√£o:** Nunca subestime o poder dos metadados! Eles podem conter mais informa√ß√µes do que voc√™ imagina.")
    
    elif "Anna" in caso_selecionado:
        st.markdown("""
        <div class="evidence-card">
            <h3>üíª Caso Anna Politkovskaya</h3>
            <p><strong>Ano:</strong> 2006</p>
            <p><strong>V√≠tima:</strong> Jornalista russa assassinada</p>
            <p><strong>Evid√™ncia digital:</strong> An√°lise forense do HD encontrou:</p>
            <ul>
                <li>Artigos deletados sobre corrup√ß√£o</li>
                <li>Comunica√ß√µes com fontes</li>
                <li>Rastros de vigil√¢ncia digital</li>
                <li>Arquivos "apagados" recuperados</li>
            </ul>
            <p><strong>T√©cnica:</strong> Recupera√ß√£o de dados deletados e an√°lise de slack space.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.info("üîç **T√©cnica forense:** Quando voc√™ 'deleta' um arquivo, apenas o ponteiro √© removido. Os dados continuam no disco at√© serem sobrescritos!")

with tab3:
    st.subheader("üéÆ Jogo: Detetive Digital")
    
    st.markdown("""
    <div class="evidence-card">
        <h3>üïµÔ∏è Cen√°rio: Investiga√ß√£o de Vazamento de Dados</h3>
        <p>Voc√™ √© um investigador forense digital. Uma empresa teve dados vazados e suspeita de um funcion√°rio interno.</p>
        <p><strong>Evid√™ncia:</strong> Um arquivo suspeito foi encontrado no computador do suspeito.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Simula√ß√£o de evid√™ncia
    if st.button("üîç Analisar Evid√™ncia Simulada"):
        st.markdown("""
        <div class="analysis-result">
        <strong>üìÅ EVID√äNCIA DIGITAL SIMULADA</strong><br><br>
        <strong>Nome:</strong> relatorio_vendas.xlsx<br>
        <strong>Tamanho:</strong> 2,847,392 bytes<br>
        <strong>MD5:</strong> a1b2c3d4e5f6789...<br>
        <strong>Criado:</strong> 2024-01-15 23:47:32<br>
        <strong>Modificado:</strong> 2024-01-16 02:15:44<br>
        <strong>Acessado:</strong> 2024-01-16 08:30:12<br><br>
        <strong>‚ö†Ô∏è DESCOBERTA:</strong> Arquivo foi modificado √†s 2:15 AM!<br>
        <strong>üìß METADADOS:</strong> √öltimo autor: "j.silva@empresa.com"<br>
        <strong>üîç CONTE√öDO:</strong> 50,000 registros de clientes
        </div>
        """, unsafe_allow_html=True)
        
        pergunta = st.radio(
            "‚ùì Baseado na an√°lise, qual √© sua conclus√£o?",
            [
                "üìã Atividade normal - arquivo de trabalho rotineiro",
                "üö® Suspeito - modifica√ß√£o fora do hor√°rio comercial", 
                "üîç Inconclusivo - precisa de mais evid√™ncias",
                "üíª Poss√≠vel acesso remoto malicioso"
            ]
        )
        
        if pergunta:
            if "Suspeito" in pergunta:
                st.success("üéØ **Correto!** Modifica√ß√µes √†s 2:15 AM s√£o altamente suspeitas. Um funcion√°rio normal n√£o estaria trabalhando nesse hor√°rio.")
                st.info("üîç **Pr√≥ximo passo:** Verificar logs de rede, keyloggers e hist√≥rico de navega√ß√£o do per√≠odo.")
            elif "Inconclusivo" in pergunta:
                st.warning("ü§î **Parcialmente correto.** Embora sempre seja bom ter mais evid√™ncias, o hor√°rio j√° √© um forte indicativo.")
            else:
                st.error("‚ùå **Incorreto.** Atividade √†s 2:15 AM em arquivo sens√≠vel √© altamente suspeita!")

with tab4:
    st.subheader("üìö Teoria: Forense Digital")
    
    teoria_tab = st.selectbox("Escolha um t√≥pico:", [
        "üîç Princ√≠pios da Forense Digital",
        "üîê Chain of Custody",
        "üìÅ Tipos de Evid√™ncia Digital",
        "‚öñÔ∏è Aspectos Legais"
    ])
    
    if "Princ√≠pios" in teoria_tab:
        st.markdown("""
        ### üîç Os 4 Princ√≠pios Fundamentais
        
        **1. üõ°Ô∏è Preserva√ß√£o da Evid√™ncia**
        - Nunca alterar a evid√™ncia original
        - Trabalhar sempre com c√≥pias bit-a-bit
        - Usar ferramentas write-blockers
        
        **2. üìã Documenta√ß√£o Completa**
        - Registrar cada passo do processo
        - Fotografar a cena digital
        - Manter logs detalhados
        
        **3. üîç An√°lise Met√≥dica**
        - Seguir procedimentos padronizados
        - Usar ferramentas validadas
        - Verificar integridade com hashes
        
        **4. ‚öñÔ∏è Admissibilidade Legal**
        - Seguir normas jur√≠dicas
        - Manter chain of custody
        - Documentar qualifica√ß√µes do perito
        """)
    
    elif "Chain of Custody" in teoria_tab:
        st.markdown("""
        ### üîê Cadeia de Cust√≥dia Digital
        
        **O que √©:**
        Documenta√ß√£o cronol√≥gica de quem teve acesso √† evid√™ncia digital.
        
        **Elementos essenciais:**
        - üë§ **Quem:** Pessoa respons√°vel
        - üìÖ **Quando:** Data e hor√°rio exatos  
        - üìç **Onde:** Local de armazenamento
        - üîç **O que:** Tipo de evid√™ncia
        - ‚ùì **Por que:** Motivo do acesso
        - üõ†Ô∏è **Como:** M√©todo utilizado
        
        **‚ùå Quebra da cadeia = Evid√™ncia inadmiss√≠vel!**
        """)

# Rodap√©
st.markdown("---")
st.markdown("""
<div class="evidence-card">
    <h3>‚öñÔ∏è Aviso Legal</h3>
    <p>üö® <strong>Este m√≥dulo √© apenas para fins educacionais!</strong></p>
    <p>‚Ä¢ N√£o fa√ßa upload de dados sens√≠veis ou confidenciais reais</p>
    <p>‚Ä¢ Use apenas em ambientes controlados para aprendizado</p>
    <p>‚Ä¢ Sempre respeite a privacidade e leis aplic√°veis</p>
    <p>‚Ä¢ Em casos reais, consulte sempre um perito forense certificado</p>
</div>
""", unsafe_allow_html=True)